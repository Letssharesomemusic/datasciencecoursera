makeCacheMatrix<- function(x=matrix()){
inv<- NULL
set<- function(y){
x<<-y
inv<<- NULL
}
get<- function(){x}
setInverse<- function(inverse){inv <<-inverse}
getInverse<- function() {inv}
list(set= set, get= get, setInverse=setInverse, getInverse=getInverse)
}
cachesolve<- function(x, ...){
inv<- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
cachesolve<- function(x, ...){
inv<- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
}
getwd()
getwd()
?getwd
getwd
lpm
makeCacheMatrix<- function(x=matrix()){
inv<- NULL
set<- function(y){
x<<-y
inv<<- NULL
}
get<- function(){x}
setInverse<- function(inverse){inv <<-inverse}
getInverse<- function() {inv}
list(set= set, get= get, setInverse=setInverse, getInverse=getInverse)
}
cachesolve<- function(x, ...){
inv<- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
}
pmatrix<- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
pmatrix$get()
cachesolve(pmatrix)
makeCacheMatrix<- function(x=matrix()){
inv<- NULL
set<- function(y){
x<<-y
inv<<- NULL
}
get<- function(){x}
setInverse<- function(inverse){inv <<-inverse}
getInverse<- function() {inv}
list(set= set, get= get, setInverse=setInverse, getInverse=getInverse)
}
cachesolve<- function(x, ...){
inv<- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
}
getwd()
source("C:/Users/alexg/Desktop/datasciencecoursera")
pmatrix<- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
pmatrix$get()
cachesolve(pmatrix)
cachesolve(pmatrix)
pmatrix<- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
pmatrix$get()
cachesolve(pmatrix)
cachesolve(pmatrix)
d<-cachesolve(pmatrix)
d
pmatrix<- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
pmatrix$get()
pmatrix$getInverse()
cachesolve(pmatrix)
cachesolve
